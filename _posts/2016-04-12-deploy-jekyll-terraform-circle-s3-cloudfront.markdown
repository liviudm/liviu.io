---
title:  "Automated Jekyll Deployment with Terraform and CircleCI on AWS S3 and Cloudflare"
date:   2016-04-12 07:00:00
categories: [jekyll]
tags: [terraform, circleci, aws, s3, jekyll]
---
I can't think of a better way to start this blog than to show you how you can configure and setup your own.

I'm a big fan of static site generators, especially for blogs, unless you really need a CMS or some other kind of platform. You can host them anywhere, it's going to cost you a lot less and it's fast. This is my setup in a few words:

* [Jekyll][jekyll]: static site generator
* [AWS S3][aws-s3]: cheap object storage hosting, in this case the static files generated by Jekyll (HTML, CSS, JS)
* [Cloudflare][cloudflare]: for hosting the `liviu.io` zone and providing a basic CDN
* [Terraform][terraform]: to manage the AWS and Cloudflare infrastructure as code
* [CircleCI][circleci]: automated build and deployment to S3

## Terraforming S3

First step is to create the Terraform configuration that will setup our buckets along with the right permissions:

```yaml
provider "aws" {
  access_key = "${var.access_key}"
  secret_key = "${var.secret_key}"
  region = "${var.aws_region}"
}

variable "aws_region" {
   default = "us-east-1"
}

variable "access_key" {
    default = "YOUR_AWS_ACCESS_KEY_ID"
}

variable "secret_key" {
    default = "YOUR_AWS_SECRET_ACCESS_KEY"
}

resource "aws_s3_bucket" "liviu_io" {
    bucket = "liviu.io"
    acl = "public-read"

    policy = <<POLICY
{
    "Version": "2012-10-17",
    "Statement": [{
        "Sid": "PublicReadForGetBucketObjects",
        "Effect": "Allow",
        "Principal": "*",
        "Action": "s3:GetObject",
        "Resource": ["arn:aws:s3:::liviu.io/*"]
        }
    ]
}
POLICY

    website {
        index_document = "index.html"
    }
}
```

Make sure you replace any occurrences of `liviu.io` with your own domain and set the correct AWS access and secret keys. At this point you should be able to run `terraform apply` and it will automatically create your S3 bucket for static site hosting and apply the right policy.

## Cloudflare

Next step is to configure Cloudflare.

Since I'm using S3 you might wonder why I didn't chose Route53 and Cloudfront instead of Cloudflare. That was my initial idea, since all of them fit together very well and I could just Terraform 'em all. As a first requirement, I wanted my blog to be (SNI) SSL enabled, which can be done on Cloudfront with ACM. Second requirement was that all requests should go to the naked domain (or from naked to www). Unfortunately, Cloudfront is not able to do any redirection. S3 can, but you can't configure an ACM certificate for a bucket.

In order to solve the above problem I chose to use Cloudflare. I can have my blog SSL-enabled with their Flexible SSL, and I can also configure rules to redirect all requests to `https://liviu.io`.

Unfortunately Terraform doesn't have full support for Cloudflare's API (yet), so some of the steps need to be made manual.

First of all you have to add your own domain to Cloudflare. Once your domain is added, you can use the following Terraform config to setup your records:

```yaml
variable "cloudflare_email" {
    default = "YOUR_CLOUDFLARE_EMAIL"
}

variable "cloudflare_token" {
    default = "YOUR_CLOUDFLARE_TOKEN"
}

provider "cloudflare" {
    email = "${var.cloudflare_email}"
    token = "${var.cloudflare_token}"
}

resource "cloudflare_record" "liviu_io" {
    domain = "liviu.io"
    name = "liviu.io"
    value = "${aws_s3_bucket.liviu_io.website_endpoint}"
    type = "CNAME"
}

resource "cloudflare_record" "www_liviu_io" {
    domain = "liviu.io"
    name = "www"
    value = "liviu.io"
    type = "CNAME"
}
```

The last step in configuring Cloudflare is to setup the redirection rules. Set the following rules:

* Redirect all traffic coming to `http://www.yourdomain.com` to `https://yourdomain.com`
* Redirect all traffic coming to `https://www.yourdomain.com/*` to `https://yourdomain.com/$1`
* `http://yourdomain.com` should always use `https`

Here are my rules for reference:

![Cloudflare Rules][cf-rules]

## Jekyll and s3_website

I'm not going to cover how to install Jekyll and start a new site or blog, because there are enough tutorials about this online. What I'm going to mention is that we're going to use the `s3_website` gem to push our website to S3. For this, you'll have to add the `s3_website` gem to your `Gemfile` and create `s3_website.yml` configuration file.

My `Gemfile` looks like this:

```ruby
source 'https://rubygems.org'
gem 'github-pages'
gem 's3_website'
```

My `s3_website.yml` file:

```yaml
s3_id: <%= ENV['AWS_ACCESS_KEY_ID'] %>
s3_secret: <%= ENV['AWS_SECRET_ACCESS_KEY'] %>
s3_bucket: liviu.io
site: _site
s3_endpoint: us-east-1
```

## AWS IAM User

We are going to need a restricted AWS user for our CircleCI deployment. Go to the IAM Console in your AWS account and create a new user. The following policy is going to allow our user to do all operations required to deploy our site to S3:

```json
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Action": [
                "s3:ListBucket",
                "s3:DeleteObject",
                "s3:GetObject",
                "s3:PutObject",
                "s3:PutObjectAcl"
            ],
            "Effect": "Allow",
            "Resource": [
                "arn:aws:s3:::liviu.io",
                "arn:aws:s3:::liviu.io/*"
            ]
        }
    ]
}
```

Attach the above policy to your newly created user and generate an access key. Note the access and secret key, we're going to use them in a moment.

## CircleCI

I'm going to assume you already have a Github account and know how to create a repository. If you don't have a CircleCI account already, you can signup for one using your Github account. After that, you'll have to select the repository that will host your Jekyll source code to be built by CircleCI. In the Project Settings page, under Environment Variables, add the `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`

The last piece you need is the `circle.yml` file that tells CircleCI how to build and deploy your project:

```yaml
machine:
  ruby:
    version: 2.3.0

general:
  artifacts:
    - "./_site"

test:
  override:
    - bundle exec jekyll build

deployment:
  production:
    branch: master
    commands:
      - bundle exec s3_website push
```

## git push

From now on, every time you push to your Github repository, CircleCI is going to build your articles and deploy them to S3, from where they're served by Cloudflare.


Did you enjoy this article? Feel free to leave your comments or submit suggestions bellow.

[jekyll]:      http://jekyllrb.com
[cf-rules]:    https://liviu.io/images/articles/cf_rules.png
[aws-s3]:      https://aws.amazon.com/s3/
[cloudflare]:  https://www.cloudflare.com
[terraform]:   https://www.terraform.io
[circleci]:    https://circleci.com
